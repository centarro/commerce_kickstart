<?php

/**
 * @file
 * Install, update and uninstall functions for the commerce_base installation profile.
 */

use Drupal\user\Entity\User;
use Drupal\user\RoleInterface;
use Drupal\user\UserInterface;

/**
 * Implements hook_install().
 *
 * Perform actions to set up the site for this profile.
 *
 * @see system_install()
 */
function demo_commerce_install() {
  // Set front page to "node".
  \Drupal::configFactory()->getEditable('system.site')->set('page.front', '/frontpage')->save(TRUE);

  // Allow visitor account creation with administrative approval.
  $user_settings = \Drupal::configFactory()->getEditable('user.settings');
  $user_settings
    ->set('register', UserInterface::REGISTER_VISITORS)
    ->set('verify_mail', FALSE)
    ->save(TRUE);

  // Enable default permissions for system roles.
  user_role_grant_permissions(RoleInterface::ANONYMOUS_ID, ['access comments']);
  user_role_grant_permissions(RoleInterface::AUTHENTICATED_ID, ['access comments', 'post comments', 'skip comment approval']);

  // Assign user 1 the "administrator" role.
  $user = User::load(1);
  $user->roles[] = 'administrator';
  $user->save();

  // Enable the Contact link in the footer menu.
  /** @var \Drupal\Core\Menu\MenuLinkManagerInterface $menu_link_manager */
  $menu_link_manager = \Drupal::service('plugin.manager.menu.link');
  $menu_link_manager->updateDefinition('contact.site_page', ['enabled' => TRUE]);

  user_role_grant_permissions(RoleInterface::ANONYMOUS_ID, ['access site-wide contact form']);
  user_role_grant_permissions(RoleInterface::AUTHENTICATED_ID, ['access site-wide contact form']);

  // Allow authenticated users to use shortcuts.
  user_role_grant_permissions(RoleInterface::AUTHENTICATED_ID, ['access shortcuts']);

  // Populate the default shortcut set.
  $shortcut = entity_create('shortcut', [
    'shortcut_set' => 'default',
    'title' => t('Add content'),
    'weight' => -20,
    'link' => ['uri' => 'internal:/node/add'],
  ]);
  $shortcut->save();

  $shortcut = entity_create('shortcut', [
    'shortcut_set' => 'default',
    'title' => t('All content'),
    'weight' => -19,
    'link' => ['uri' => 'internal:/admin/content'],
  ]);
  $shortcut->save();

  // Enable the admin theme.
  \Drupal::configFactory()->getEditable('node.settings')->set('use_admin_theme', TRUE)->save(TRUE);

  // Import our demo content (links, nodes.)
  \Drupal::getContainer()->get('demo_commerce.content_importer')->onInstall();
  
  /** @var \Drupal\commerce_store\StoreStorage $store_storage */
  $store_storage = \Drupal::entityTypeManager()->getStorage('commerce_store');
  $stores = $store_storage->loadMultiple();
  $store = reset($stores);
  $store_storage->markAsDefault($store);

  foreach (['simple', 'clothing'] as $product_type) {
    $display = commerce_get_entity_display('commerce_product', $product_type, 'view');
    $component = $display->getComponent('variations');
    $component['type'] = 'commerce_cart_flyout_add_to_cart';
    $display->setComponent('variations', $component);
    $display->save();
  }
}

/**
 * Implements hook_install_tasks_alter().
 */
function demo_commerce_install_tasks_alter(&$tasks, $install_state) {
  $tasks['install_finished']['function'] = 'demo_commerce_install_finished';
}

/**
 * Performs final installation steps and displays a 'finished' page.
 *
 * @param $install_state
 *   An array of information about the current installation state.
 */
function demo_commerce_install_finished(&$install_state) {
  install_finished($install_state);
  // Remove the Search API indexing messages, and all the other status messages.
  $messenger = \Drupal::service('messenger');
  $messenger->deleteByType('status');
  $warning_messages = $messenger->deleteByType('warning');
  $success_message = t('Congratulations, you installed @drupal!', [
    '@drupal' => drupal_install_profile_distribution_name(),
  ]);
  $messenger->addMessage($success_message);
  // Re-add the warning messages (after the installation success message).
  foreach ($warning_messages as $warning_message) {
    $messenger->addMessage($warning_message, 'warning');
  }
}
